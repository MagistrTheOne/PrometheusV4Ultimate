"""Email Draft skill implementation."""

import os
import re
from datetime import datetime
from typing import Dict, Any, List, Optional, Union
from libs.skills import BaseSkill, SkillSpec, SkillRunResult, PermissionType, ResourceLimit


class EmailDraftSkill(BaseSkill):
    """Skill for creating email drafts with templates and formatting."""
    
    def __init__(self):
        spec = SkillSpec(
            name="email_draft",
            version="1.0.0",
            description="Create email drafts with templates and formatting",
            inputs={
                "to": "Recipient email address",
                "subject": "Email subject line",
                "body": "Email body content",
                "from_name": "Sender name (optional)",
                "template": "Email template: plain, html, markdown (default: plain)",
                "output_file": "Path to save email draft"
            },
            outputs={
                "output_file": "Path to the email draft file",
                "email_size": "Size of email draft in bytes",
                "recipient_count": "Number of recipients",
                "has_attachments": "Whether email has attachments",
                "template_used": "Template type used"
            },
            perms={
                PermissionType.FS_READ: True,
                PermissionType.FS_WRITE: True,
                PermissionType.NETWORK: False,
                PermissionType.ENV_VAR: False
            },
            limits={
                ResourceLimit.CPU_MS: 2000,
                ResourceLimit.RAM_MB: 50,
                ResourceLimit.TIME_S: 10,
                ResourceLimit.DISK_MB: 10
            },
            tags=["email", "draft", "template", "communication"],
            author="PrometheusULTIMATE",
            license="MIT"
        )
        super().__init__(spec)
    
    def _execute(self, **kwargs) -> Dict[str, Any]:
        """Execute email draft creation."""
        to = kwargs["to"]
        subject = kwargs["subject"]
        body = kwargs["body"]
        from_name = kwargs.get("from_name", "PrometheusULTIMATE")
        template = kwargs.get("template", "plain")
        output_file = kwargs["output_file"]
        
        # Validate email address
        if not self._is_valid_email(to):
            raise ValueError(f"Invalid email address: {to}")
        
        # Validate template
        if template not in ["plain", "html", "markdown"]:
            raise ValueError(f"Invalid template: {template}. Must be plain, html, or markdown")
        
        # Create email draft
        email_content = self._create_email_draft(
            to, subject, body, from_name, template
        )
        
        # Save email draft
        os.makedirs(os.path.dirname(output_file), exist_ok=True)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(email_content)
        
        # Get file size
        email_size = os.path.getsize(output_file)
        
        # Count recipients
        recipient_count = len([addr.strip() for addr in to.split(',') if addr.strip()])
        
        return {
            "output_file": output_file,
            "email_size": email_size,
            "recipient_count": recipient_count,
            "has_attachments": False,  # This skill doesn't handle attachments
            "template_used": template
        }
    
    def _is_valid_email(self, email: str) -> bool:
        """Validate email address format."""
        # Basic email validation regex
        pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
        return re.match(pattern, email.strip()) is not None
    
    def _create_email_draft(
        self, 
        to: str, 
        subject: str, 
        body: str, 
        from_name: str, 
        template: str
    ) -> str:
        """Create email draft content based on template."""
        
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        if template == "html":
            return self._create_html_email(to, subject, body, from_name, timestamp)
        elif template == "markdown":
            return self._create_markdown_email(to, subject, body, from_name, timestamp)
        else:  # plain
            return self._create_plain_email(to, subject, body, from_name, timestamp)
    
    def _create_plain_email(
        self, 
        to: str, 
        subject: str, 
        body: str, 
        from_name: str, 
        timestamp: str
    ) -> str:
        """Create plain text email draft."""
        
        email_content = f"""From: {from_name}
To: {to}
Subject: {subject}
Date: {timestamp}

{body}

---
Generated by PrometheusULTIMATE Email Draft Skill
"""
        return email_content
    
    def _create_html_email(
        self, 
        to: str, 
        subject: str, 
        body: str, 
        from_name: str, 
        timestamp: str
    ) -> str:
        """Create HTML email draft."""
        
        # Convert plain text body to HTML
        html_body = self._text_to_html(body)
        
        email_content = f"""<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{subject}</title>
    <style>
        body {{
            font-family: Arial, sans-serif;
            line-height: 1.6;
            color: #333;
            max-width: 600px;
            margin: 0 auto;
            padding: 20px;
        }}
        .header {{
            border-bottom: 2px solid #007bff;
            padding-bottom: 10px;
            margin-bottom: 20px;
        }}
        .footer {{
            border-top: 1px solid #ddd;
            padding-top: 10px;
            margin-top: 20px;
            font-size: 0.9em;
            color: #666;
        }}
    </style>
</head>
<body>
    <div class="header">
        <h2>{subject}</h2>
        <p><strong>From:</strong> {from_name}</p>
        <p><strong>To:</strong> {to}</p>
        <p><strong>Date:</strong> {timestamp}</p>
    </div>
    
    <div class="content">
        {html_body}
    </div>
    
    <div class="footer">
        <p>Generated by PrometheusULTIMATE Email Draft Skill</p>
    </div>
</body>
</html>"""
        return email_content
    
    def _create_markdown_email(
        self, 
        to: str, 
        subject: str, 
        body: str, 
        from_name: str, 
        timestamp: str
    ) -> str:
        """Create Markdown email draft."""
        
        email_content = f"""# {subject}

**From:** {from_name}  
**To:** {to}  
**Date:** {timestamp}

---

{body}

---

*Generated by PrometheusULTIMATE Email Draft Skill*
"""
        return email_content
    
    def _text_to_html(self, text: str) -> str:
        """Convert plain text to HTML."""
        
        # Escape HTML characters
        text = text.replace('&', '&amp;')
        text = text.replace('<', '&lt;')
        text = text.replace('>', '&gt;')
        
        # Convert line breaks to HTML
        text = text.replace('\n', '<br>\n')
        
        # Convert URLs to links
        url_pattern = r'https?://[^\s<>"]+'
        text = re.sub(url_pattern, r'<a href="\g<0>">\g<0></a>', text)
        
        return text
